from django.core.cache import cache
from api.utils.cache import cache_response
from api.permissions import RoleBasedAccessPermission

class BaseCachedViewSetMixin:
    """
    –ë–∞–∑–æ–≤—ã–π –º–∏–∫—Å–∏–Ω –¥–ª—è API ViewSet-–æ–≤:
    - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ list –∏ retrieve
    - –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    permission_classes = [RoleBasedAccessPermission]
    cache_prefix = "api"

    def clear_api_cache(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ –∫–µ—à–∞, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ API"""
        keys = cache.keys(f"{self.cache_prefix}:*")
        if keys:
            cache.delete_many(keys)
            print(f"üßπ –ö–µ—à API –æ—á–∏—â–µ–Ω ({len(keys)} –∫–ª—é—á–µ–π)")

    def perform_create(self, serializer):
        self.clear_api_cache()
        serializer.save(user=self.request.user)

    def perform_update(self, serializer):
        self.clear_api_cache()
        serializer.save()

    def perform_destroy(self, instance):
        self.clear_api_cache()
        return super().perform_destroy(instance)

    def get_queryset(self):
        """–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä/–∞–¥–º–∏–Ω"""
        user = self.request.user
        qs = super().get_queryset()
        if not (user.is_superuser or user.role in ['manager', 'admin']):
            qs = qs.filter(user=user)
        return qs

    @cache_response(timeout=120)
    def list(self, request, *args, **kwargs):
        """–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞"""
        return super().list(request, *args, **kwargs)

    @cache_response(timeout=300)
    def retrieve(self, request, *args, **kwargs):
        """–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        return super().retrieve(request, *args, **kwargs)
